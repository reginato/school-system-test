require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe GroupsController do

  # This should return the minimal set of attributes required to create a valid
  # Group. As you add validations to Group, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {name: "5 Serie B"}
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # GroupsController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "GET 'index'" do
    let!(:group) { FactoryGirl.create(:group) }
    
    before do
      get 'index'
    end
    
    it { response.should be_success }
    it { assigns(:groups).should == [group] }
  end

  describe "GET show" do
    let!(:group) { FactoryGirl.create(:group) }
    
    it "assigns the requested group as @group" do
      get :show, :id => group.id
      assigns(:group).should eq(group)
    end
  end

  describe "GET 'new'" do
    before do
      get 'new'
    end

    it { response.should be_success }
    it { assigns(:group).should be_instance_of Group }
    it { render_template 'new' }
  end

  describe "GET 'edit" do
    let!(:group) { FactoryGirl.create(:group) }

    before do
      get 'edit', :id => group.to_param
    end
  
    it { response.should be_success }
    it { assigns(:group).should be_instance_of Group }
    it { render_template 'edit' }
  end

  describe "POST create" do          
    context "with valid params" do
      before { post :create, group: valid_attributes }
      
      it { assigns(:group).should be_a(Group) }
      it { assigns(:group).should be_persisted }
      it { response.should redirect_to(groups_path) }
    end
    
    context "with invalid params" do
      def do_action(param)
        post(:create, group: param)
      end
    
      before do
        do_action({name: ""})
      end

      it { should render_template(:new) }
      it { should respond_with(:success) }
    end
  end


  describe "POST 'update'" do
    let!(:group) { FactoryGirl.create(:group) }
    context "with valid params" do
      before do
        put 'update', :id => group.to_param, :group => { :name => "5 serie B" }
      end

      it { assigns(:group).should == group }
      it { redirect_to(groups_path) }
      it { flash[:notice].should == "Group was successfully updated." }
      it { group.reload.name.should == "5 serie B" }
    end
    
    context "with invalid params" do
      before do
        put 'update', :id => group.to_param, :group => { :name => "" }
      end

      it { assigns(:group).should == group }
      it { render_template 'edit' }
    end
        
    it "should redirect to home" do
      put 'update', :id => group.to_param, :group => { :name => "5 Serie B" }
      response.should redirect_to(groups_path)
    end
  end

  describe "DELETE destroy" do
    let!(:group) { FactoryGirl.create(:group) }
    
    context "should find and redirect" do      
      before do
        delete :destroy, id: group.to_param
      end
      
      it { assigns(:group).should == group }
      it { redirect_to(groups_path) }
    end  
          
    context "context" do
      it "should destroy a Group" do
        expect {
          delete :destroy, id: group.to_param
        }.to change(Group, :count).by(-1)
      end        
    end    
  end
  
end
